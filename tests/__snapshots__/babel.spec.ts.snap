// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`babel \`<Trans>\` component can configure the length of the compressed key 1`] = `
"export function ReactComponent() {
  const {
    t
  } = useTranslation('namespace');
  return <Headline as='h1' size='xl' textAlign='center'>
              <Trans t={t} i18nKey="bb42f8cd525dba08" />
            </Headline>;
}"
`;

exports[`babel \`<Trans>\` component correctly compresses the child text node as the key 1`] = `
"export function ReactComponent() {
  const {
    t
  } = useTranslation('namespace');
  return <Headline as='h1' size='xl' textAlign='center'>
              <Trans t={t} i18nKey="bb42f8" />
            </Headline>;
}"
`;

exports[`babel \`<Trans>\` component correctly compresses the interpolated React component (inline) 1`] = `
"export function ReactComponent() {
  const {
    t
  } = useTranslation('namespace');
  return <Headline as='h1' size='xl' textAlign='center'>
              <Trans t={t} i18nKey="bf56a7">~<Link>~</Link>
              </Trans>
            </Headline>;
}"
`;

exports[`babel \`<Trans>\` component correctly compresses the interpolated React component (overarching) 1`] = `
"export function ReactComponent() {
  const {
    t
  } = useTranslation('namespace');
  return <Headline as='h1' size='xl' textAlign='center'>
              <Trans t={t} i18nKey="1f04cd"><Link>~</Link></Trans>
            </Headline>;
}"
`;

exports[`babel \`<Trans>\` component correctly compresses the interpolated React component (self-closing) 1`] = `
"export function ReactComponent() {
  const {
    t
  } = useTranslation('namespace');
  return <Headline as='h1' size='xl' textAlign='center'>
              <Trans t={t} i18nKey="4f9d22">
                <Link />~</Trans>
            </Headline>;
}"
`;

exports[`babel \`<Trans>\` component correctly compresses the interpolated variable 1`] = `
"export function ReactComponent() {
  const {
    t
  } = useTranslation('namespace');
  const name = 'Sam';
  return <Headline as='h1' size='xl' textAlign='center'>
              <Trans t={t} i18nKey="d81b0f">~{{
        name
      }}~</Trans>
            </Headline>;
}"
`;

exports[`babel \`<Trans>\` component correctly compresses the string literal i18nKey attribute as the key 1`] = `
"export function ReactComponent() {
  const {
    t
  } = useTranslation('namespace');
  return <Headline as='h1' size='xl' textAlign='center'>
              <Trans t={t} i18nKey="bb42f8" />
            </Headline>;
}"
`;

exports[`babel \`<Trans>\` component correctly compresses the string literal i18nKey attribute as the key with interpolated child nodes 1`] = `
"export function ReactComponent() {
  const {
    t
  } = useTranslation('namespace');
  return <Headline as='h1' size='xl' textAlign='center'>
              <Trans t={t} i18nKey="bb42f8">~<Link>~</Link>
              </Trans>
            </Headline>;
}"
`;

exports[`babel \`<Trans>\` component correctly compresses the string literal i18nKey attribute as the key without child nodes 1`] = `
"export function ReactComponent() {
  const {
    t
  } = useTranslation('namespace');
  return <Headline as='h1' size='xl' textAlign='center'>
              <Trans t={t} i18nKey="bb42f8" />
              <Trans t={t} i18nKey="bb42f8" />
            </Headline>;
}"
`;

exports[`babel \`<Trans>\` component correctly compresses the template string i18nKey attribute as the key 1`] = `
"export function ReactComponent() {
  const {
    t
  } = useTranslation('namespace');
  return <Headline as='h1' size='xl' textAlign='center'>
              <Trans t={t} i18nKey="bb42f8" />
            </Headline>;
}"
`;

exports[`babel \`<Trans>\` component errors for components with a variable as the i18nKey attribute 1`] = `
"/tests/client/src/test.jsx: [next-i18next-compress] Unsupported AST type: We do not know how to handle "Identifier" in this part of your code:
        <Trans t={t} i18nKey={variable} />
            </Headline>
 "
`;

exports[`babel \`<Trans>\` component errors for components with variable spreads 1`] = `
"/tests/client/src/test.jsx: [next-i18next-compress] Unsupported AST type: We do not know how to handle "JSXSpreadAttribute" in this part of your code:
'>
              <Trans t={t} {...variable} />
            </Headline>
  "
`;

exports[`babel \`t\` function can configure the length of the compressed key 1`] = `
"export function ReactComponent() {
  const {
    t
  } = useTranslation('namespace');
  return <Input label={t("f2488fd4ef4adbc6")} />;
}"
`;

exports[`babel \`t\` function correctly compresses the interpolated variable argument as the key 1`] = `
"export function ReactComponent() {
  const {
    t
  } = useTranslation('namespace');
  const name = 'Sam';
  return <Input label={t("d81b0f", {
    name
  })} />;
}"
`;

exports[`babel \`t\` function correctly compresses the string literal argument as the key 1`] = `
"export function ReactComponent() {
  const {
    t
  } = useTranslation('namespace');
  return <Input label={t("f2488f")} />;
}"
`;

exports[`babel \`t\` function correctly compresses the template string argument as the key 1`] = `
"export function ReactComponent() {
  const {
    t
  } = useTranslation('namespace');
  return <Input label={t("f2488f")} />;
}"
`;

exports[`babel \`t\` function errors for function calls with a member expression as the argument 1`] = `
"/tests/client/src/test.jsx: [next-i18next-compress] Unsupported AST type: We do not know how to handle "MemberExpression" in this part of your code:
       return <Input label={t(foo.bar)} />
        }
      "
`;

exports[`babel \`t\` function errors for function calls with a variable as the argument 1`] = `
"/tests/client/src/test.jsx: [next-i18next-compress] Unsupported AST type: We do not know how to handle "Identifier" in this part of your code:
       return <Input label={t(variable)} />
        }
      "
`;

exports[`babel \`t\` function ignores function calls with no arguments 1`] = `
"export function ReactComponent() {
  const {
    t
  } = useTranslation('namespace');
  return <Input label={t()} />;
}"
`;

exports[`babel does nothing if running in development 1`] = `
"export function ReactComponent() {
  const {
    t
  } = useTranslation('namespace');
  return <Box>
            <Input label={t('Email address')} />
            <Trans t={t}>Forgot password</Trans>
          </Box>;
}"
`;

exports[`babel does nothing if the file is in node_modules 1`] = `
"export function ReactComponent() {
  const {
    t
  } = useTranslation('namespace');
  return <Box>
            <Input label={t('Email address')} />
            <Trans t={t}>Forgot password</Trans>
          </Box>;
}"
`;
